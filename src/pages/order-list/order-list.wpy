<style lang="less">
  @import '../../style/base.less';
  @import '../../style/list-show.less';
  @import './order-list.less';

</style>
<template>
  <view class="container">
    <!-- 信息列表 -->
    <view class="publish-msg-wrap">
      <repeat for="{{msgList}}" key="index" index="index" item="item">
        <view class="item-wrap">
          <view class="goods-wrap" @tap="toOrderDetail({{item.id}})">
            <view class="pic-wrap">
              <image class="pic" src="{{item.snap_img}}" mode="scaleToFill" lazy-load="false"></image>
            </view>
            <view class="product-content">
              <view class="title">{{item.snap_name}}</view>
              <view class="price">¥{{item.price}}</view>
            </view>
          </view>
          <view class="product-money">
            共{{item.total_count}}件商品 应支付: ¥<text class="total-money">{{item.total_price}}</text>
          </view>
          <view class="btn-wrap">
            <view class="delete btn center-flex" @tap="deleteOrder({{item.id}})">取消订单</view>
            <view class="edit btn center-flex" @tap="payment({{item.id}},{{item.user_id}},{{item.total_price}},{{item.status}})">立即支付</view>
          </view>
        </view>
      </repeat>


    </view>
    <!-- 没有搜索结果提示 -->
    <view class="no-result-hinit center-flex" wx:if="{{isShowHinit}}" style="font-size:40rpx;height:300rpx;">
      没有您想要的内容
    </view>

  </view>
</template>

<script>
  import wepy from 'wepy'
  import request from '../../lib/api/request'
  import noMsgHinit from '../../components/noMsgHinit/noMsgHinit'

  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '我的订单'
    }
    components = {

    }

    data = {
      user_id: '',
      limit: '20',
      msgList: [],
      isShowHinit: false, //是否显示没信息时的提示
      page: 1,
    }

    components = {
      noMsgHinit: noMsgHinit, //没有数据提示块
    }

    computed = {

    }

    methods = {
      //跳转订单详情页
      toOrderDetail(order_id) {
        wepy.navigateTo({
          url: `/pages/order-detail/order-detail?order_id=${order_id}`
        });
      },

      //删除订单
      async deleteOrder(order_id) {
        wx.showModal({
          title: '提示',
          content: '您要取消这个订单吗？',
          success(res) {
            if (res.confirm) {
              console.log('用户点击确定')
              let data = {
                order_id: order_id
              }
              let status = request.deleteOrderList(data);
              if (status) {
                wepy.showToast({
                  title: '删除成功', //提示的内容,
                  icon: 'success', //图标,
                  duration: 2000,
                });
              } else {
                wepy.showToast({
                  title: '删除失败', //提示的内容,
                  icon: 'success', //图标,
                  duration: 2000,
                });
              }
            } else if (res.cancel) {
              console.log('用户点击取消')
            }
          }
        })
      },

      //付款
      async payment(id,user_id,total_price,status){
        if(status>1){
          return ;
        }
        let data={
          total_price:total_price,
          user_id:user_id,
          order_id:id,
        }
        let payParams = await request.getPaymentParams(data);
        if(payParams){
          console.log('payparams',payParams);
         let status= await request.Payment(payParams); 
         if(status){
           wepy.showToast({
             title: '支付成功', //提示的内容,
             icon: 'success', //图标,
             duration: 5000,
           });
         }else {
           wepy.showToast({
             title: '支付失败', //提示的内容,
             icon: 'none', //图标,
             duration: 5000,
           });
           
         }
        }else {
          wepy.showToast({
            title: '下单失败', 
            icon: 'none', 
            duration: 5000, 
          });
        }
      } 

    }

    events = {

    }

    async onLoad(params) {
      // wepy.showLoading({
      //   title: '加载中', 
      //   mask: true, 
      // });
      // console.log(ListShow);
      let userInfo = await this.$parent.login();
      if (userInfo) {
        this.user_id = userInfo.id + '';
      }
      this.$apply();

      console.log('收藏', params);
      let data = {
        user_id: this.user_id + '',
      }

      this.getListMsg(data); //获取列表信息
    }

    // 获取列表信息
    async getListMsg(data) {
      let list = await request.getOrderList(data);
      console.log('列表信息', list);

      if (list && list.length > 0) {
        this.msgList = list;
      } else {
        if (this.page == 1) {
          this.isShowHinit = true;
        }
        this.$apply();
        wepy.hideLoading();
        return;
      }

      if (this.page == 1) {
        this.msgList = list;
      } else {
        this.msgList = this.msgList.concat(list);
      }
      this.$apply();
      wepy.hideLoading();
    }

    //滑动到底部加载更多
    onReachBottom() {
      this.page++;
      wepy.showLoading({
        title: '加载中...',
        mask: true,
      });
      let data = {
        limit: this.limit,
        page: this.page + '',
        user_id: this.user_id,
        labelCode: this.labelCode,
        searchQuery: this.searchQuery,
      }
      this.getListMsg(data).then(() => {
        wepy.hideLoading();
      })

    }
  }

</script>
